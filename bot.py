import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7191146491:AAFqpXRbyKKac6sw_wKfeP-c0n_CYU9gScM"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNELS = ["@sukunafreesoft", "@sukunasoft"]  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
FILES = {
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1": "https://shre.su/A583",
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2": "https://sukunafreesoft.pp.ua"
}

bot = telebot.TeleBot(TOKEN)

# === –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò ===
def is_subscribed(user_id):
    for channel in CHANNELS:
        try:
            status = bot.get_chat_member(channel, user_id).status
            if status not in ["member", "administrator", "creator"]:
                return False
        except Exception:
            return False
    return True

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    for app_name in FILES.keys():
        markup.add(InlineKeyboardButton(app_name, callback_data=app_name))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
@bot.callback_query_handler(func=lambda call: call.data in FILES)
def send_file(call):
    user_id = call.from_user.id
    if is_subscribed(user_id):
        bot.send_message(user_id, f"‚úÖ –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: {FILES[call.data]}")
    else:
        markup = InlineKeyboardMarkup()
        for channel in CHANNELS:
            markup.add(InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}", url=f"https://t.me/{channel[1:]}"))
        markup.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)

# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ===
@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_subscription(call):
    user_id = call.from_user.id
    if is_subscribed(user_id):
        bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(user_id, "‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
bot.polling(none_stop=True)
